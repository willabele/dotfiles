#! /bin/bash

set -x

CONTAINER=""
if [[ $# -ge 2 ]]
then
    if [[ $1 == "-g" ]]
    then
        CONTAINER=`get_container.py $2`
    fi
    shift
    shift
fi

# Ensure we've got what we need for SSH_AUTH_SOCK
if [[ -n ${SSH_AUTH_SOCK} ]]; then
    SSH_AUTH_DIR=$(dirname $(readlink -f ${SSH_AUTH_SOCK}))
    SSH_AUTH_NAME=$(basename ${SSH_AUTH_SOCK})
fi

# Clean up the remnants of a dead SSH_AUTH_SOCK
if [[ -z ${SSH_AUTH_DIR} ]]; then
    SSH_AUTH_SOCK=""
    SSH_AUTH_DIR=""
    SSH_AUTH_NAME=""
fi

# user and group we are running as to ensure files created inside
# the container retain the same permissions
my_uid=$(id -u)
my_gid=$(id -g)
my_id=$(id -un)

# This currently gets the Docker environment from Docker Registry
exec docker run \
    -e BUILD_UID=${my_uid} \
    -e BUILD_GID=${my_gid} \
    -v /etc/passwd:/etc/passwd:ro \
    -v /etc/group:/etc/group:ro \
    -e USER=${my_id} \
    -e HOME=/home/${my_id} \
    -u ${my_uid}:${my_gid} \
    -v /home/${my_id}:/home/${my_id} \
    ${SSH_AUTH_SOCK:+-e SSH_AUTH_SOCK="/tmp/ssh-agent/${SSH_AUTH_NAME}"} \
    ${SSH_AUTH_SOCK:+-v "${SSH_AUTH_DIR}":/tmp/ssh-agent} \
    -v "${PWD}":/var/build:rw \
    -w /var/build \
    --tmpfs /tmp:exec,mode=1777 \
    --cap-add SYS_ADMIN \
    --device=/dev/fuse \
    --security-opt apparmor:unconfined \
    --privileged \
    --expose=5037 -it   --rm  \
    ${EXTRA_CONTAINER_ARGS} \
    ${CONTAINER} \
    $*
